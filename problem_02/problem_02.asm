; ----------------------------------------------------------------------------------------
;     Compile and run as:
;     nasm -felf64 problem_02.asm && ld problem_02.o && ./a.out
; ----------------------------------------------------------------------------------------

;Problem description:
;"Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
; By starting with 1 and 2, the first 10 terms will be:
; 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
; By considering the terms in the Fibonacci sequence whose values do not exceed four million,
; find the sum of the even-valued terms."

;General problem outline (simple solution):
;a = 1
;b = 2
;c = 3
;sum = 2
;for(;;){
;    c = a + b
;    if (c>=4000000){
;        break
;    }
;    if (c%2==0){
;        sum+=c
;    }
;    a = b
;    b = c
;}

;rax is used for division
;let rdi store the current sum
;let rsi store the max value (4000000)
;rdx stores remainder

;rdx holds the remainder from division
;let r8 store a    (e.g. for the first 3 terms 1,2,3, a = 1, b = 2, c = 3)
;let r9 store b
;let r10 store c

%include "../utils.asm"

global    _start

section   .text


problem_2:
    mov r8,1            ;set a
    mov r9,1            ;set b
    mov rdi,0           ;set current sum
    mov rsi,4000000     ;set max value
    
    jmp .mainLoop
.mainLoop:
    mov r10,0            
    add r10,r8
    add r10,r9          ;c = a + b
    cmp r10,rsi         ;if c>=maxVal, exit 
    jge .finished
    mov rax,r10         ;check if c is even 
    mov rdx,0
    mov rbx,2
    div rbx

    mov r8,r9           ;before we do anything else, set a = b and b = c
    mov r9,r10
    
    cmp rdx,0           ;if remainder ==0 (c%2==0), is even
    jne .mainLoop       ;if c%2!=0, skip back to start of loop
    add rdi,r10         ;add current value to sum
    jmp .mainLoop       ;jump back to start 
.finished:
    mov rax,rdi
    ret
    
_start:
    mov rax,msg
    call print_str
    call problem_2
    call print_int_LF  ;print answer
    call exit
    
section   .data
          msg  db  "Solution to problem 2 is: ",0h